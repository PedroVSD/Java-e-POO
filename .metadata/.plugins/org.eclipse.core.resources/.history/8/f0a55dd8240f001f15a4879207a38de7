import java.util.Scanner;

public class Sudoku {
    private static final int N = 9;
    private static final int EMPTY = 0;

    public static void main(String[] args) {
        int[][] board = generateRandomSudoku();
        System.out.println("Tabuleiro de Sudoku gerado aleatoriamente:");
        printBoard(board);

        System.out.println("Tente resolver o Sudoku. Use números de 1 a 9 e 0 para células vazias.");

        if (solveSudoku(board)) {
            System.out.println("\nParabéns! Você resolveu o Sudoku!");
        } else {
            System.out.println("\nNão foi possível resolver o Sudoku gerado. Mais sorte na próxima vez!");
        }
    }

    public static boolean solveSudoku(int[][] board) {
        Scanner scanner = new Scanner(System.in);

        for (int row = 0; row < N; row++) {
            for (int col = 0; col < N; col++) {
                if (board[row][col] == EMPTY) {
                    System.out.print("Insira um número para a célula na linha " + (row + 1) + " e coluna " + (col + 1) + ": ");
                    int num = scanner.nextInt();
                    if (isValid(board, row, col, num)) {
                        board[row][col] = num;
                    } else {
                        System.out.println("Número inválido. Tente novamente.");
                        col--;
                    }
                }
            }
        }

        scanner.close();

        return isSolved(board);
    }

    private static boolean isValid(int[][] board, int row, int col, int num) {
        // Verifica se o número já está presente na mesma linha ou coluna
        for (int x = 0; x < N; x++) {
            if (board[row][x] == num || board[x][col] == num) {
                return false;
            }
        }

        // Verifica se o número já está presente na mesma sub-grade de 3x3
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i + startRow][j + startCol] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    private static boolean isSolved(int[][] board) {
        // Verifica se todas as células foram preenchidas
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void printBoard(int[][] board) {
        for (int row = 0; row < N; row++) {
            for (int col = 0; col < N; col++) {
                System.out.print(board[row][col] + " ");
            }
            System.out.println();
        }
    }

    public static int[][] generateRandomSudoku() {
        int[][] board = new int[N][N];
        // Lógica para gerar um tabuleiro de Sudoku aleatório
        return board;
    }
}